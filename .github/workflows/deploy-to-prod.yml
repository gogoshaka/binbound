name: Build and Deploy

on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on Git tags starting with "v"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set Docker Image Tag
      - name: Set Docker Image Tag
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ github.ref_type }}" == "tag" ]; then
              echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }} .
      
      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }}
      
      - name: Transfer docker-compose.yml to Production
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cat > /home/${{ secrets.PRODUCTION_USER }}/docker-compose.yml << 'EOF'
            $(cat ./docker-compose.yml)
            EOF

      # Step 7: Deploy to Production
      - name: Deploy to Production
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.SSH_PORT}}
          script: |
            echo "${{ secrets.DOCKER_PAT }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }}
            docker-compose up -d