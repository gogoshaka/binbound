name: Build and Deploy

on:
  push:
    tags:
      - 'v*'  # Trigger the workflow on Git tags starting with "v"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set Docker Image Tag
      - name: Set Docker Image Tag
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ github.ref_type }}" == "tag" ]; then
              echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }} -f ./deployment/Dockerfile .
      
      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }}

      # Step 6: Create .env.production File
      - name: Create .env.production on Production Server
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "DATABASE_HOSTNAME=${{ secrets.DATABASE_HOSTNAME }}" > /home/${{ secrets.PRODUCTION_USER }}/.env.production
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> /home/${{ secrets.PRODUCTION_USER }}/.env.production
            echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> /home/${{ secrets.PRODUCTION_USER }}/.env.production
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> /home/${{ secrets.PRODUCTION_USER }}/.env.production
            echo "DATABASE_URL=postgresql://${{ secrets.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.DATABASE_HOSTNAME }}:5432/postgres?schema=public&connect_timeout=30&pool_timeout=30&socket_timeout=30" >> /home/${{ secrets.PRODUCTION_USER }}/.env.production
            chmod 600 /home/${{ secrets.PRODUCTION_USER }}/.env.production

      # Step 6: Transfer Deployment Directory to Production (includes Dockerfile, docker-compose, ...)
      - name: Transfer Deployment Directory to Production
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ./deployment/
          target: /home/${{ secrets.PRODUCTION_USER }}
  


      # Step 7: Deploy to Production
      - name: Deploy to Production
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.SSH_PORT}}
          script: |
            echo "${{ secrets.DOCKER_PAT }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/binboundapp:${{ env.IMAGE_TAG }}
            docker-compose --env-file ./env.production up -d