import z from "zod";

export const compensationSchema = z.object({
  currency: z.enum(["AUD", "BRL", "CAD", "CLP", "COP", "DKK", "CHF", "EUR", "GBP", "HKD", "ILS", "INR", "JPY", "PLN", "USD"]),
  annual_base_salary: z.number().int().positive(),
  last_salary_change: z.number().min(0).max(4),
  annual_bonus: z.number().int().nonnegative(),
}); 

export const employeerSchema = z.object({
  organization_name: z.string().min(1).max(100),
  parent_company_name: z.string().min(1).max(100),
  organization_seniority: z.number().min(0).max(50),
}); 

export const businessEmailValidationSchema = z.object({
  business_email: z.string().email(),
}); 
export const businessEmailValidationCodeValidationSchema = z.object({
  business_email_validation_code: z.string(),
}); 

export const personalEmailValidationSchema = z.object({
  personal_email: z.string(),
}); 
export const personalEmaillValidationCodeValidationSchema = z.object({
  personal_email_validation_code: z.string(),
}); 

export type CompensationFormType = z.infer<typeof compensationSchema>;
export type FlattenedCompensationFormErrorsType = z.inferFlattenedErrors<typeof compensationSchema>;

export type EmployeerFormType = z.infer<typeof employeerSchema>;
export type FlattenedEmployeerFormErrorsType = z.inferFlattenedErrors<typeof employeerSchema>;

export type BusinessEmailFormType = z.infer<typeof businessEmailValidationSchema>;
export type BusinessEmailValidationCodeFormType = z.infer<typeof businessEmailValidationCodeValidationSchema>;
export type PersonalEmailFormType = z.infer<typeof personalEmailValidationSchema>;
export type PersonalEmailValidationCodeFormType = z.infer<typeof personalEmaillValidationCodeValidationSchema>;
