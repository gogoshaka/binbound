version: '3.8'

services:
  postgresdb:
    image: postgres:17.4
    hostname: ${DATABASE_HOSTNAME}
    container_name: ${DATABASE_HOSTNAME}
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    env_file:
      - ../.env.production
    ports:
      - '5432:5432'
    expose:
      - 5432
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 2s
      retries: 20

  server:
    build: 
      context: .  
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    stdin_open: true
    tty: true  # Keeps the container running for debugging
    depends_on:
      postgresdb:
        condition: service_healthy
    env_file:
      - ../.env.production
    networks:
      - database-network
      - reverse-proxy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`binbound.com`, `www.binbound.com`)"
      - "traefik.http.routers.server.entrypoints=websecure"
      - "traefik.http.routers.server.tls.certresolver=myresolver"


  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=gauthier.lawny@outlook.fr"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt" # For Let's Encrypt certificates
    labels:
      - "traefik.http.routers.traefik.rule=Host(`traefik.binbound.com`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      # Middleware for redirecting HTTP to HTTPS
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    networks:
      - reverse-proxy-network

networks:
  database-network:
    driver: bridge
  reverse-proxy-network:
    driver: bridge